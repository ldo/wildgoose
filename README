This is an experiment in plausible-deniability encryption.

Copyright 2016 by Lawrence D'Oliveiro <ldo@geek-central.gen.nz>. This
document is licensed CC0
<https://creativecommons.org/publicdomain/zero/1.0/>; do with it what
you will.

   >**WARNING**: This actual implemention is **not secure enough** for production use.
   There are very likely a hundred different ways to attack the program that do not
   involve the strength or otherwise of the mathematical theory itself. What I want
   to determine is whether the theory works or not. If it doesn’t, then bugs in
   the code don’t matter anyway.

With all the encryption algorithms I’ve been aware of up to now, you very quickly
discover whether you entered the right key during the decryption step.

But what if you had an algorithm where, if you entered the wrong key, it might
not immediately reveal the fact? Instead it would simply keep processing without
terminating.

I’m not talking about an obfuscated implementation of an algorithm that wastes its
time in pointless loops: such a thing can be discovered by an attacker, who can
patch their copy of the decryption code to bypass such nonsense. No, I’m talking
about designing such time-wasting into the algorithm itself, so that there is no
way to shortcut the process.

Perhaps we should call this encryption with *incomplete-key decryption*.
The “outer” encryption algorithm takes as its key two integers *n* and *k*,
from which it constructs the encryption key *K* for an “inner” encryption algorithm,
which is a conventional secret-key algorithm such as AES-128. Any pair (*n*, *k*)
will always produce the same *K*. The value *n* should have, say, over a dozen
digits, to make it hard to guess. The value *k* need not be so large; perhaps 4
or 5 digits is sufficient, depending on the speed of the available hardware and
the desired decryption time.

After encryption, the value *n* is saved as the secret key, but *the value *k*
is discarded*. Thus, decryption requires making guesses as to what the value of
*k* was. Since there is no fixed upper bound on what *k* can be, there can be
no definite end to the guessing process. If you start with *k* = 1, 2, and so on,
you will hit the right value eventually--provided you started with the right
*n*. But if *n* was wrong, you may never realize that.

What are the uses for such an algorithm? One possibility is that the attacker
can get hold of the correct key, but that it is hidden among a large number
(perhaps thousands or more) of decoy keys, so that they cannot easily determine
which key to try.

Some Governments have passed laws requiring users to turn over decryption keys
on demand. With an algorithm like this, the decryption key could be “hidden in
plain sight” as it were; when the user’s machine or media are confiscated, could
they get away with claiming that the necessary key is already in the possession
of the Government authority doing the confiscation?

Even if the law is specific enough to require that the user point to the exact
key to use, they can still pick a wrong one, and claim that the decryption
will take a very long time. For added value, they can decide, after a suitably
lengthy interval, that perhaps that was the wrong key after all, and pick another
(wrong) key, and repeat the time-wasting process.

With sufficient resources, of course the attacker could simply try all the keys
in parallel; as soon as the correct decryption completes, all the attempts with
decoy keys can be abandoned. Thus, there needs to a sufficient number of decoys
to render this strategy impractical. If even decryption with the correct key takes
a significant amount of time (say, a few seconds), then the number of decoy keys
need not be so great.

The particular outer encryption algorithm defined here is based on the [Collatz
recurrence relation](http://mathworld.wolfram.com/CollatzProblem.html). Each
starting positive integer value produces a sequence of positive integers that
end with 1. While the lengths of sequences can vary unpredictably, all sequences
seems to be finite in length, though this has not been proven.

It should be possible to concoct similar algorithms based on other equally
hard-to-predict recurrence relations, such as the
[logistic map](http://mathworld.wolfram.com/LogisticMap.html) in its chaotic
regime, or the formula that defines the
[Mandelbrot set](http://mathworld.wolfram.com/MandelbrotSet.html). Or alternatively,
just use any pseudorandom number generator, taking the input *n* to compute the
starting seed, and *k* to determine the number of elements in the output sequence
to use.

A more detailed encryption procedure is as follows: the sequence of integers *n*,
*n* + 1, ... is used, each in turn as a starting input to the Collatz
formula, to produce a sequence of output integers ending in 1. For each such output
sequence, the even ones (and the terminating integer 1) are discarded, and the
remaining odd ones are in turn fed into a hash function, such as SHA-256. The
process stops when *k* Collatz output integers have been used. The output of the
hash (or a sufficiently-long initial part of it) is then used as the key to the
inner encryption algorithm. For example, the first 128 bits of the hash could be
used as the encryption/decryption key with AES-128.

(The choice of odd integers only greater than 1 is done to make the sequence less
predictable, since odd integers never occur in succession in a Collatz “hailstone”
sequence, whereas even ones do.)

For decryption, only the starting number *n* is needed. The Collatz sequence for *n*,
*n* + 1 ... in turn is generated as before. *Note that, without knowledge of *k*, there
is no hint as to when the sequence should end.* First, try just the first integer
in this sequence; put it through the same hash function as before, then try to use
the result as the decryption key. If this succeeds, then the algorithm stops.

Otherwise, try computing a hash from the first two integers in the sequence. If that
doesn’t work, try the first three, and so on.

This algorithm should only terminate if it started with the right value of *n*, whereupon
it terminates after having used the first *k* integers computed.

The value *k* should probably not be recorded anywhere (not even in the user’s memory),
since it can serve as a clue to the attacker.

If the wrong value of *n* is used, the decryption algorithm will (we assume) keep
running for an infeasibly large amount of time without producing a meaningful result.
The attacker cannot reliably tell when to stop it, since the user may indeed have chosen a
very large value of *k*. All they can do is take a guess after some arbitrary amount
of time that the value of *n* being tried is probably wrong.

The enclosed Python script, called “wildgoose”, is a sample implementation of this
concept.
